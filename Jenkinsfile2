pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: runkubectl
            image: alpine
            command:
            - cat
            tty: true
            volumeMounts:
            - name: kubectl-secret
              mountPath: /home/jenkins/.kube
          restartPolicy: Never
          volumes:
          - name: kubectl-secret
            secret:
                secretName: admin-conf-secret 
        '''
    }
  }
  environment {
        // Customize these environment variables as needed
        DOCKER_REGISTRY_CREDENTIALS = credentials('docker-registry-credentials')
        KUBE_CONFIG_CREDENTIALS = credentials('kube-config-credentials')
        IMAGE_NAME = 'my-python-app'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        KUBE_NAMESPACE = 'jenkins-ns'
        KUBE_DEPLOYMENT_NAME = 'my-webcalc'
  }
  stages {
        stage('Deploy to Kubernetes') {
            steps {
              container('runkubectl') {
                script {
                    sh 'apk --no-cache add curl'
                    sh 'curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl'
                    sh 'chmod +x ./kubectl'
                    sh 'mv ./kubectl /usr/bin/kubectl'
                    sh '/usr/bin/kubectl --kubeconfig=/home/jenkins/.kube/config apply -f /home/jenkins/agent/workspace/calcdeploy2/deployment.yaml'
                    
                }
              }
            }
        }
  }
    post {
     success {
        withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
        sh  ("""
            curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Deploy* : OK '
        """)
        }
     }

     aborted {
        withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
        sh  ("""
            curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Deploy* : `Aborted` '
        """)
        }

     }
     failure {
        withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
        sh  ("""
            curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC  *Branch*: ${env.GIT_BRANCH} *Deploy* : `Failure`'
        """)
        }
     }

     }
}
